{"version":3,"sources":["components/Timer.jsx","components/InfiniteTimer.jsx","App.js","serviceWorker.js","index.js"],"names":["Timer","onStart","a","props","onTimeStart","state","remainingTime","isStopped","setState","step","onTick","delay","alert","onTimeEnd","time","pause","onTimePause","this","autostart","ms","Promise","res","setTimeout","width","onClick","style","marginBottom","margin","backgroundColor","height","Component","InfiniteTimer","onTimeChange","console","log","timeLeft","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAgGeA,E,kDA7Fb,aAAc,IAAD,8BACX,gBAsBDC,QAvBY,sBAuBF,sBAAAC,EAAA,sDACR,EAAKC,MAAMC,YAAY,EAAKC,MAAMC,eAD1B,YAEF,EAAKD,MAAMC,cAAc,GAFvB,oBAGJ,EAAKD,MAAME,UAHP,yDAMP,EAAKC,SAAS,CACZF,cAAc,EAAKD,MAAMC,cAAc,EAAKH,MAAMM,OAClD,WACA,EAAKN,MAAMO,OAAO,EAAKL,MAAMC,kBATxB,SAWD,EAAKK,MAAM,EAAKR,MAAMM,MAXrB,6BAasB,IAA3B,EAAKJ,MAAMC,gBACbM,MAAM,WACN,EAAKT,MAAMU,YACX,EAAKL,SAAS,CACZF,cAAe,EAAKH,MAAMW,KAC1BP,WAAU,KAlBL,4CAvBE,EA+CbQ,MAAQ,WACN,EAAKP,SAAS,CACZD,WAAW,IACX,WACA,EAAKJ,MAAMa,kBAjDb,EAAKX,MAAM,CACTC,cAAc,EACdC,WAAW,GAJF,E,gEAOO,IAAD,OACjBU,KAAKT,SAAS,CACZF,cAAeW,KAAKd,MAAMW,OAC1B,WACG,EAAKX,MAAMe,WACZ,EAAKV,SAAS,CACZD,WAAW,IACX,kBAAK,EAAKN,kB,4BAKXkB,GACL,OAAO,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,Q,+BAoCnC,IAAD,OACFI,EAAkC,IAA1BN,KAAKZ,MAAMC,cAAoBW,KAAKd,MAAMW,KACpD,OACE,6BACE,4BACCU,QAAS,WACH,EAAKnB,MAAME,UACZ,EAAKC,SAAS,CACZD,WAAW,IACX,kBAAI,EAAKN,aAGT,EAAKc,SAKZU,MAAO,CAACC,aAAa,SACrBT,KAAKZ,MAAME,UAAY,QAAQ,SACrB,6BACX,yBAAKkB,MAAO,CACVF,MAAM,SACNI,OAAO,SACPC,gBAAgB,QAEhB,yBAAKH,MAAO,CACVF,MAAM,GAAD,OAAIA,EAAJ,KACLK,gBAAgB,OAChBC,OAAO,gB,GArFAC,aC0BNC,E,4MAxBb1B,MAAQ,CACNS,KAAM,K,EAGRD,UAAY,kBAAM,EAAKL,SAAS,CAAEM,KAAM,O,EAExCkB,aAAe,SAAClB,GAAD,OAAU,EAAKN,SAAS,CAAEM,U,uDAGvC,OACE,kBAAC,EAAD,CACAJ,OAAQ,SAACI,GAAD,OAAUmB,QAAQC,IAAI,gGAAuBpB,IACrDA,KAAMG,KAAKZ,MAAMS,KACjBV,YAAa,SAAC+B,GAAD,OAAcF,QAAQC,IAAI,qFACvClB,YAAa,SAACmB,GAAD,OAAcF,QAAQC,IAAI,sFACvCF,aAAcf,KAAKe,aACnBnB,UAAWI,KAAKJ,UAChBJ,KAAM,IACLS,WAAW,Q,GAnBUY,aCSbM,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.523e8321.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nclass Timer extends  Component{\n  constructor(){\n    super()\n    this.state={\n      remainingTime:0,\n      isStopped: true,\n  }\n}\n  componentDidMount(){\n    this.setState({\n      remainingTime: this.props.time\n    },()=>{\n      if(this.props.autostart){\n        this.setState({\n          isStopped: false\n        },()=> this.onStart())\n      }\n    })\n  }\n\n   delay(ms) {\n    return new Promise(res => setTimeout(res, ms));\n   }\n\n   onStart = async ()=>{\n     this.props.onTimeStart(this.state.remainingTime)\n     while(this.state.remainingTime>0){\n      if(this.state.isStopped){\n        break\n      }\n      this.setState({\n        remainingTime:this.state.remainingTime-this.props.step\n      },()=>{\n        this.props.onTick(this.state.remainingTime)\n      })\n      await this.delay(this.props.step)\n     }\n     if(this.state.remainingTime===0){\n      alert('The End')\n      this.props.onTimeEnd()\n      this.setState({\n        remainingTime: this.props.time,\n        isStopped:true\n      })\n   }\n  }\n\n\n  pause = () => {\n    this.setState({\n      isStopped: true\n    },()=>{\n      this.props.onTimePause();\n    })\n\n  }\n\n  render(){\n    let width= (this.state.remainingTime *100)/this.props.time;\n      return (\n        <div>\n          <button\n           onClick={()=>{\n              if(this.state.isStopped){\n                this.setState({\n                  isStopped: false\n                },()=>this.onStart())\n                \n              } else{\n                  this.pause()\n              }\n              \n           }\n            } \n           style={{marginBottom:'10px'}}>\n          {this.state.isStopped ? 'Start':'Pause'}\n            </button><br/>\n          <div style={{\n            width:'1000px',\n            margin:'0 auto',\n            backgroundColor:'red',\n            }}> \n            <div style={{\n              width:`${width}%`,\n              backgroundColor:'aqua',\n              height:'25px'\n        \n              }}></div>\n          </div>\n        </div>\n      )\n  }\n}\n\nexport default Timer;","import React,{Component} from 'react';\nimport Timer from './Timer';\n\nclass InfiniteTimer extends Component{\n  state = {\n    time: 1000 * 1000\n  }\n\n  onTimeEnd = () => this.setState({ time: 1000 * 1000 })\n  \n  onTimeChange = (time) => this.setState({ time })\n\n  render(){\n    return (\n      <Timer\n      onTick={(time) => console.log(\"Осталось времени: \" + time)}\n      time={this.state.time} \n      onTimeStart={(timeLeft) => console.log(\"Таймер запущен!\")}\n      onTimePause={(timeLeft) => console.log(\"Таймер на паузе!\")}\n      onTimeChange={this.onTimeChange} \n      onTimeEnd={this.onTimeEnd}\n      step={100}\n       autostart={false}\n       />\n    )\n  }\n}\n\nexport default InfiniteTimer;","import React from 'react';\nimport './App.css';\nimport InfiniteTimer from './components/InfiniteTimer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InfiniteTimer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}